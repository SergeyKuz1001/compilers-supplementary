import Collection;
import Array;
import List;
import Utils;

fun makeCache (data) {
  fun get (loc) {
    fun inner (data, loc) {
      case loc of
        {} -> Some (data)
      | idx:idxs ->
          case findMap (data, idx) of
            None -> None
          | Some (value) -> inner (value, idxs)
          esac
      esac
    }

    inner (data, loc)
  }

  fun set (loc, value) {
    fun inner (data, loc, value) {
      case loc of
        {} -> value
      | idx:idxs -> data . removeMap (idx) . addMap (idx, inner (
          case findMap (data, idx) of
            None -> emptyMap (compare)
          | Some (subdata) -> subdata
          esac, idxs, value))
      esac
    }

    makeCache (inner (data, loc, value))
  }

  [get, set]
}

public fun emptyCache () {
  makeCache (emptyMap (compare))
}

public fun getCache (loc) {
  [view, "cache", fun (c) { c [0] (loc) }]
}

public fun setCache (loc, value) {
  [on, "cache", fun (c) { c [1] (loc, value) }]
}
