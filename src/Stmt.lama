-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (name, expr) -> c . onFst (fun (s) { s <- [name, evalExpr (s, expr) ] })
  | Seq (stmt1, stmt2) -> c . eval (stmt1) . eval (stmt2)
  | Skip -> c
  | Read (name) -> case readWorld (c.snd) of [z, w_] -> c . onFst (fun (s) { s <- [name, z] }) . onSnd (fun (_) { w_ }) esac
  | Write (expr) -> c . onSnd (fun (w) { writeWorld (evalExpr(c.fst, expr), w) })
  esac
}

-- Functions for work with state of Statement evaluator
fun onFst (pair, f) {
  case pair of
    [x, y] -> [f (x), y]
  | _  -> failure ("object is not a pair\n")
  esac
}

fun onSnd (pair, f) {
  case pair of
    [x, y] -> [x, f (y)]
  | _  -> failure ("object is not a pair\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
