-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Utils;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values

fun evalDefs (c, ds) {
  on (c, "state", foldr (
    infix >>,
    id,
    map (
      fun (d) {
        case d of
          Var (xs) -> [addVars, xs]
        | Fun (n, as, b) -> [addFun, n, as, b]
        esac
      },
      ds
    )
  ))
}

fun eval (c, expr) {
  doM (c,
    case expr of
      Assn (r, v) ->
        sequence ({[eval, r], [eval, v]}) >>
        [under, "state", fun ({REF (x), v}) { [infix <-, [x, v]] }] >>
        [fmap, fun ({_, v}) { v }]
    | Seq (exp1, exp2) ->
        [eval, exp1].void >>
        [eval, exp2]
    | Skip ->
        [return, 0]
    | Read (x) ->
        [from, "world", readWorld] >>
        [into, "state", fun (v) { [infix <-, [x, v]] }] >>
        [return, 0]
    | Write (exp) ->
        [eval, exp] >>
        [into, "world", writeWorld] >>
        [return, 0]
    | If (cond, tbr, ebr) ->
        [eval, cond] >>= fun (v) {
        [eval, bool (v != 0, tbr, ebr)] }
    | While (cond, body) ->
        [eval, cond] >>= fun (v) {
        bool (v != 0,
          [eval, body].void >>
          [eval, expr],
          [return, 0]
        ) }
    | DoWhile (body, cond) ->
        [eval, body].void >>
        [eval, cond] >>= fun (v) {
        bool (v != 0,
          [eval, expr],
          [return, 0]
        ) }
    | Var (name) ->
        [view, "state", [lookupVar, name]]
    | Ref (name) ->
        [return, REF (name)]
    | Const (num) ->
        [return, num]
    | Binop (op, l, r) ->
        sequence ({[eval, l], [eval, r]}) >>
        [fmap, fun ({lv, rv}) { evalOp (op, lv, rv) }]
    | Scope (defs, exp) ->
        [on, "state", enterScope] >>
        [evalDefs, defs] >>
        [eval, exp] >>
        [on, "state", leaveScope]
    | Call (name, exps) ->
        [view, "state", [lookupFun, name]] >>= fun ([args, body]) {
        traverse (eval.ap, exps) >>
        [fmap, zip . halfCurry (args)] >>= fun (args) {
        [view, "state", id] >>= fun (savedState) {
        [on, "state", enterFunction >> [addVars, args]] >>
        [eval, body] >>= fun (result) {
        [view, "state", getGlobal] >>
        [on, "state", const (savedState)] >>
        [into, "state", leaveFunction . curryFlip] >>
        [return, result]
        } } } }
    | Ignore (exp) ->
        [eval, exp].void >>
        [return, 0]
    esac
  )
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  gets (eval (createData(["state", emptyState (), "world", createWorld (input)]), expr), "world", getOutput)
}
