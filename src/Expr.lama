-- Expression evaluator

import List;
import State;
import Utils;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalListLast (c, exprs) {
  foldl (
    fun ([c, _], e) { eval (c, e) },
    [c, None],
    exprs)
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (r, v) ->
      -- c . evalList ({r, v}) . overFst (fun ({REF (x), v}) { [[infix <-, [x, v]], v] })
      overFst (evalList (c, {r, v}), fun ({REF (x), v}) { [[infix <-, [x, v]], v] })
  | Seq (exp1, exp2) ->
      -- c . evalListLast ({exp1, exp2})
      evalListLast (c, {exp1, exp2})
  | Skip ->
      -- c . with (BOT)
      with (c, BOT)
  | Read (x) ->
      -- c . fromSnd (readWorld) . intoFst (fun (v) { [infix <-, [x, v]] }) . with (BOT)
      with (intoFst (fromSnd (c, readWorld), fun (v) { [infix <-, [x, v]] }), BOT)
  | Write (exp) ->
      -- c . eval (exp) . intoSnd (writeWorld.curry) . with (BOT)
      with (intoSnd (eval (c, exp), writeWorld.curry), BOT)
  | If (cond, tbr, ebr) ->
      -- c . eval (cond) . into (fun (r) { [eval, bool (r != 0, tbr, ebr)] })
      into (eval (c, cond), fun (r) { [eval, bool (r != 0, tbr, ebr)] })
  | While (cond, body) ->
      -- c . eval (cond) . into (fun (r) { bool (r != 0, [evalListLast, {body, expr}], [with, BOT]) })
      into (eval (c, cond), fun (r) { bool (r != 0, [evalListLast, {body, expr}], [with, BOT]) })
  | DoWhile (body, cond) ->
      -- c . evalListLast ({body, cond}) . into (fun (r) { bool (r != 0, [eval, expr], [with, BOT]) })
      into (evalListLast (c, {body, cond}), fun (r) { bool (r != 0, [eval, expr], [with, BOT]) })
  | Var (name) ->
      -- c . withFunc (apply (name))
      withFunc (c, apply (name))
  | Ref (name) ->
      -- c . with (REF (name))
      with (c, REF (name))
  | Const (num) ->
      -- c . with (num)
      with (c, num)
  | Binop (op, l, r) ->
      -- c . evalList ({l, r}) . onSnd (fun ({lv, rv}) { evalOp (op, lv, rv) })
      onSnd (evalList (c, {l, r}), fun ({lv, rv}) { evalOp (op, lv, rv) })
  | Ignore (exp) ->
      -- c . eval (exp) . onSnd (const (BOT))
      onSnd (eval (c, exp), const (BOT))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
