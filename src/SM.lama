-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn (c, i) {
  case i of
    READ      -> case readWorld (c.trd) of [z, w_] -> c . onFst (fun (st) { z : st }) . onTrd (fun (_) { w_ }) esac
  | WRITE     -> case c.fst of z : st -> c . onFst (fun (_) { st }) . onTrd (fun (w) { writeWorld (z, w) }) esac
  | BINOP (s) -> case c.fst of y : x : st -> c . onFst (fun (_) { evalOp (s, x, y) : st }) esac
  | LD    (x) -> c . onFst (fun (st) { (c.snd) (x) : st })
  | ST    (x) -> case c.fst of z : st -> c . onFst (fun (_) { st }) . onSnd (fun (s) { s <- [x, z] }) esac
  | CONST (n) -> c . onFst (fun (st) { n : st })
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | insn : oinsns -> c . evalInsn (insn) . eval (oinsns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Functions for work with state of Stack machine
fun onFst (triple, f) {
  case triple of
    [x, y, z] -> [f (x), y, z]
  | _ -> failure ("object is not a triple\n")
  esac
}

fun onSnd (triple, f) {
  case triple of
    [x, y, z] -> [x, f (y), z]
  | _ -> failure ("object is not a triple\n")
  esac
}

fun onTrd (triple, f) {
  case triple of
    [x, y, z] -> [x, y, f (z)]
  | _ -> failure ("object is not a triple\n")
  esac
}

fun trd (object) {
  case object of
    [_, _, z] -> z
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> { LD (name) }
  | Const (num) -> { CONST (num) }
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr (expr) +++ { ST (name) }
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip -> {}
  | Read (name) -> { READ, ST (name) }
  | Write (expr) -> compileExpr (expr) +++ { WRITE }
  esac
}
