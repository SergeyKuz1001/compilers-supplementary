-- World: holds input-output streams

import List;
import Utils;

-- Creates a world; "input" is expected to be a
-- list of integers
public fun createWorld (input) {
  [input, {}]
}

-- Writes an output into a world
public fun writeWorld (n) {
  [on, "world", fun ([input, output]) { [input, n:output] }]
}

-- Reads an input from a world; the result is
-- a pair --- the value read, the new world
public fun readWorld () {
  [from, "world", fun ([n:input, output]) { [[input, output], n] }]
}

-- Gets an output from a world
public fun getOutput (data) {
  gets (data, "world", fun ([_, output]) { reverse (output) })
}
