-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Utils;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inbrP (p) {
  inbr (s ("("), p, s (")"))
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 { fun (a) { assertValue (a, Const (stringInt (x)), loc) } } |

                                  -- identifier
                                  x=lident                                          { fun (a) {
                                                                                        case a of
                                                                                          Ref  -> Ref (x)
                                                                                        | Void -> Ignore (Var (x))
                                                                                        | _    -> Var (x)
                                                                                        esac
                                                                                    } } |

                                  loc=pos -kRead x=inbrP[lident]                    { fun (a) { assertVoid (a, Read (x), loc) } } |

                                  loc=pos -kWrite e=inbrP[exp]                      { fun (a) { assertVoid (a, Write (e (Val)), loc) } } |

                                  loc=pos -kSkip                                    { fun (a) { assertVoid (a, Skip, loc) } } |

                                  loc=pos -kIf c=exp
                                          -kThen tb=exp
                                          eicbs=(memo [eta syntax (-kElif c=exp -kThen b=exp { [c, b] })])*
                                          ebm=(-kElse exp)?
                                          -kFi                                      { fun (a) {
                                                                                        foldr (
                                                                                        fun (acc, [c, b]) { If (c (Val), b (a), acc) },
                                                                                        -- ebm . maybe (apply (a), assertVoid (a, Skip, loc)),
                                                                                        case ebm of Some (eb) -> eb (a) | None -> assertVoid (a, Skip, loc) esac,
                                                                                        [c, tb] : eicbs)
                                                                                    } } |

                                  loc=pos -kWhile c=exp -kDo b=exp -kOd             { fun (a) { assertVoid (a, While (c (Val), b (Void)), loc) } } |

                                  loc=pos -kDo b=exp -kWhile c=exp -kOd             { fun (a) { assertVoid (a, DoWhile (b (Void), c (Val)), loc) } } |

                                  loc=pos -kFor
                                          i=basic -s[","]
                                          c=basic -s[","]
                                          n=basic -kDo
                                          b=exp -kOd                                { fun (a) {
                                                                                        assertVoid (a,
                                                                                          Seq (i (Void), While (c (Val), Seq (b (Void), n (Void)))),
                                                                                          loc)
                                                                                    } } |

                                  e=inbrP[exp]                                      { e }),

    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),

    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
